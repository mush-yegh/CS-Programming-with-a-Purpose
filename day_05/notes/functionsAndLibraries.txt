Leecture slides:
	https://introcs.cs.princeton.edu/java/lectures/keynote/CS.5.Functions.pdf
Online materials:
	https://introcs.cs.princeton.edu/java/21function/


As we address more sophisticated applications, our programs get bigger and bigger, and the problem of organizing the program.
So that we can maintain it easily and add new code, it's a very important one. 
Topic of functions and libraries is the mechanism that we use to help us maintain and organize our programs.
Let's look at some basic concepts.
What we want to talk about today's ways to reuse codes by developing it as independent modules, so that we can build big programs from small pieces.
The idea is called Modular programming and it's been around for a long time. What we want to do is organize programs 
as independent modules that still do a job together. 
And the reason that we want to do that is, that it's easier to share and reuse code and to build bigger programs.

Modular programming
• Organize programs as independent modules that do a job together.
• Why? Easier to share and reuse code to build bigger programs.

People build huge programs with modular programming, where teams work together and what we need is tools to make the pieces fit well together.
Now, this has been an idea that's been around for a long time.

Facts of life
• Support of modular programming has been a holy grail for decades.
• Ideas can conflict and get highly technical in the real world.

For now, for this lecture, we're going to start with a very simple definition.
We're going to talk about libraries, and a library is nothing more than a set of functions, for the purposes of this lecture.

Def. A library is a set of functions. (for the purposes of this lecture)
Def. A module is a .java file. (for the purposes of this lecture)

Actually, there's quite a bit more to it that we'll learn about in a few lectures, and a '.java' file can be a set of functions, but it can be more.
So for now, we're just going to talk of them as doing the same thing, because we want to talk about modular programming 
that java files that contains sets of functions.
Later on, we'll look at how modules implement data types which is a more general concept that even better supports modular programming.

For now. Libraries and modules are the same thing: .java files containing sets of functions.
Later. Modules implement data types (stay tuned).

So we're talking Java functions, or also known as static methods.
And so, that's like a mathematical function, takes some input arguments, returns an output value and it might cause some side effects.
It's like a mathematical function but it's more general because of the side effects.
And so, you're familiar with the use of mathematical functions to calculate formulas and what programmers do is to use functions to build modular programs.

So let's look at the anatomy of a function or in Java, it's called a static method.

To implement a function (static method)
• Create a name.
• Declare type and name of argument(s).
• Specify type for return value.
• Implement body of method.
• Finish with return statement.

So this is the square root function that we implemented in the early lecture.

public static double sqrt(double c, double eps){
	if (c < 0) {
		return Double.NaN;
	}
	double t = c;
	while (Math.abs(t - c/t) > eps * t){
		t = (c/t + t) / 2.0;
	}
	return t;
}

So it's got a name, sqrt, it's got arguments. Every argument needs a type and a name and those come in parenthesis after the function name.
It's got a return value, the value the function produces and that has to have a type. So in this case, it returns a value of type double.
All of that together, I put public and static in front of it, is called the method signature.

It tells you what you need to know, in order to use it or call it.
And then, there's a Code, there's Java code which is the body of the method, this is the body of square root.
The last thing in the code, usually as a return statement and it's just the word return followed by a value of the return type.

Def. The scope of a variable is the code that can refer to it by name.

And when we have sets of functions, you can't refer to every variable anywhere.
In a Java library a variable scope is the code following its declaration in the same block.
We try to keep the scope low, as much as we possibly can.
Small blocks of code and functions help us do that.

Summary of flow control for a function call
• Control transfers to the function code.
• Argument variables are declared and
initialized with the given values.
• Function code is executed.
• Control transfers back to the calling code 
(with return value assigned in place of
the function name in the calling code).

The operating system calls main when we invoke a program with the "java" command.
So main is a function that is called by the operating system.

We don't like to write code that changes function arguments. Even though it works, it's a little bit confusing.
So we call that bad style. 
Instead we prefer this style as compact code. 
	return [COMPUTED VALUE];
We're going to just do our computation with that variable just as if we had declared it within the code block, and it produces the answer.


errors hierarchy
